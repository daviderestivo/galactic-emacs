name: Emacs 30

on:
  push:
    branches:
      - master
      - dev
    paths:
      - '.github/workflows/emacs-30.yml'
      - 'conf/**'
      - 'lib/**'
      - 'lisp/**'
      - 'init.el'
  pull_request:
    paths:
      - '.github/workflows/emacs-30.yml'
      - 'conf/**'
      - 'lib/**'
      - 'lisp/**'
      - 'init.el'
  schedule:
    - cron:  '0 6 * * *'

jobs:
  build:

    runs-on: macos-13
    strategy:
      matrix:
        build_opts:
          # Emacs 30.x
          - 'emacs-head@30'

    env:
      HOMEBREW_GALACTIC_EMACS_GITHUB_REPOSITORY: ${{ github.repository }}
      HOMEBREW_GALACTIC_EMACS_GITHUB_REPOSITORY_REF: ${{ github.head_ref || github.ref }}
      GPG: '/usr/local/bin/gpg'

    steps:
    - uses: actions/checkout@v1

    - name: Tap Homebrew Emacs Head
      run: brew tap daviderestivo/emacs-head

    - name: Install ${{ matrix.build_opts }}
      run: brew install ${{ matrix.build_opts }}

    - name: Create personal config file from template
      run: mv personal.el.example personal.el

    - name: Create custom config file from template
      run: mv custom-packages-and-settings.el.example custom-packages-and-settings.el

    - name: Create savehist directory
      run: mkdir -p ${{ github.workspace }}/savehist

    - name: Create gnupg Emacs directory
      run: mkdir -p ${{ github.workspace }}/elpa/gnupg

    - name: Init git submodules
      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master

    - name: Attempting startup...
      run: emacs -nw --batch --debug-init --eval='(let
                                                   ((debug-on-error nil)
                                                    (initial-buffer-choice "*scratch*")
                                                    (user-emacs-directory default-directory)
                                                    (user-init-file (expand-file-name "init.el")))
                                                   (setq url-show-status nil)
                                                   (load-file user-init-file)
                                                   (message "... startup successful!"))'
