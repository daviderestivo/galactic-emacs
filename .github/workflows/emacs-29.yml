name: Emacs 29

on:
  push:
    branches:
      - master
      - dev
    paths:
      - '.github/workflows/emacs-29.yml'
      - 'conf/**'
      - 'lib/**'
      - 'lisp/**'
      - 'init.el'
  pull_request:
    paths:
      - '.github/workflows/emacs-29.yml'
      - 'conf/**'
      - 'lib/**'
      - 'lisp/**'
      - 'init.el'
  schedule:
    - cron:  '0 6 * * *'

jobs:
  build:

    runs-on: macos-latest
    strategy:
      matrix:
        build_opts:
          # Emacs 29.x
          - 'emacs-head@29'

    env:
      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}
      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}
      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}
      GNUPGHOME: ${{ github.workspace }}/elpa/gnupg

    steps:
    - uses: actions/checkout@v1

    - name: Tap Homebrew Emacs Head
      run: brew tap daviderestivo/emacs-head

    - name: Install ${{ matrix.build_opts }}
      run: brew install ${{ matrix.build_opts }}

    - name: Create gnupg Emacs directory
      run: mkdir -p ${{ github.workspace }}/elpa/gnupg

    - name: Fetch _NEW_ Elpa GPG key
      run: gpg --keyserver keyserver.ubuntu.com --receive-keys 066DAFCB81E42C40

    - name: Create personal config file from template
      run: mv personal.el.example personal.el

    - name: Create savehist directory
      run: mkdir -p ${{ github.workspace }}/savehist

    - name: Init git submodules
      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master

    - name: Attempting startup...
      run: emacs -nw --batch --eval='(let
                                      ((debug-on-error (>=  emacs-major-version 26))
                                       (initial-buffer-choice "*scratch*")
                                       (user-emacs-directory default-directory)
                                       (user-init-file (expand-file-name "init.el"))
                                       (setq url-show-status nil))
                                      (package-initialize)
                                      (load-file user-init-file)
                                      (message "... startup successful!"))'
